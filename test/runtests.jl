using QuantumDots
using Test

@testset "QuantumDots.jl" begin

end

@testset "Fock" begin
    N = 6
    B = FermionFockBasis{:ðŸ¦„}()
    focknumber = 20
    fbits = BitVector(bits(focknumber,N))
    Ïˆ = FermionBasisState(focknumber,N,B)
    Ïˆ == FermionBasisState{:ðŸ¦„}(focknumber,N)
    @test focknbr(Ïˆ) == focknumber
    @test chainlength(Ïˆ) == N
    @test bits(Ïˆ)[:ðŸ¦„] == fbits

    Bspin = FermionFockBasis{(:â†‘,:â†“)}()
    Ïˆspin = FermionBasisState((focknumber,focknumber),N,Bspin)
    Bspin2 = FermionFockBasis{(:â†‘,)}()
    Ïˆspin2 = FermionBasisState((focknumber,),2*N,Bspin2)
    #Ïˆspin takes up more memory than Ïˆspin2. Should switch to using a single focknumber. 

    # @test focknbr(Ïˆspin) == focknbr(Ïˆ) + focknbr(Ïˆ)*2^N 
    # @test chainlength(Ïˆspin) == N
end

@testset "Operators" begin
    N = 2
    B = FermionFockBasis(:a)
    Ïˆ0 = FermionFockBasisState(0,N,B)
    Cdag1 = CreationOperator{B}(1)
    Cdag2 = CreationOperator{B}(2)
    @test focknbr(Cdag1*Ïˆ0) == 1
    @test bits(Cdag1*Ïˆ0) == [1,0]
    @test focknbr(Cdag2*Ïˆ0) == 2
    @test bits(Cdag2*Ïˆ0) == [0,1]
    @test focknbr(Cdag2*(Cdag2*Ïˆ0)) isa Missing
end

@testset "interface" begin
    # We want an interface something like this
    species = :â†‘,:â†“
    N = 4
    basis = FermionFockBasis(N, species; conserve_parity=false)

    Ïˆ = randomstate(basis) #Dense or sparse?
    @test chainlength(Ïˆ) == N
    @test eltype(Ïˆ) == Float64
    @test inner(Ïˆ,Ïˆ) â‰ˆ 1 #Norm of state
    Ïˆ' # Lazy adjoint. Need to implement support for Adjoint{T,State}
    
    @test Ïˆ' * Ïˆ == inner(Ïˆ,Ïˆ) == inner(Ïˆ',Ïˆ)
    outer(Ïˆ,Ïˆ) == Ïˆ*Ïˆ'
    Ïˆf = randomfockstate(basis) #A particular fock state. Should be sparse
    Ïˆfdense = vec(Ïˆf) #Dense version


    hamiltonian = emptyoperator(basis)
    #Intra site
    for i in 1:N
        hamiltonian += Î”*Pairing(i,i,:â†‘,:â†“) + hc() #Superconductive pairing
        hamiltonian += U*NumberOperator(i,:â†‘)*NumberOperator(i,:â†“) #Coulomb interaction
    end
    #Inter site
    for i in 1:N-1
        hamiltonian += t*Hopping(i,i+1,:â†‘) + hc() #Standard hopping. Maybe Hopping((i,:â†‘),(i+1,:â†‘)) also or instead
        hamiltonian += t*Hopping(i,i+1,:â†“) + hc()
        hamiltonian += Î±*Hopping(i,i+1,:â†‘,:â†“) + hc() #Spin orbit
        hamiltonian += Î±*Hopping(i,i+1,:â†“,:â†‘) + hc() 
        hamiltonian += Î”1*Pairing(i,i+1,:â†‘,:â†“) + hc() #Superconductive pairing
        hamiltonian += Î”1*Pairing(i,i+1,:â†“,:â†‘) + hc()
        hamiltonian += V*NumberOperator(i)*NumberOperator(i+1) #Coulomb
    end

    eigsolve(hamiltonian) #Iterative eigensolver, which does not rely on the hamiltonian being dense. Can give a few of the lowest energy states
    Hmat = Matrix(hamiltonian,basis) #Convert to standard dense matrix.
    eigen(Hmat) #Exact diagonalization

    ##Any symbol can be used for species
    hamiltonian = emptyoperator()
    species = :ðŸ¦„,:ðŸ‘¹ #(\unicorn_face, \japanese_ogre) 
    N = 2
    basis = FermionFockBasis(N, species)
    ## Can write hamiltonian in terms of elementary fermionic operators as well
    #Intra site
    for i in 1:N
        hamiltonian += Î”*Cdag(i,:ðŸ‘¹)*Cdag(i,:ðŸ¦„) + hc() #Superconductive pairing
        hamiltonian += U*Cdag(i,:ðŸ‘¹)*C(i,:ðŸ‘¹)*Cdag(i,:ðŸ¦„)*C(i,:ðŸ¦„) #Coulomb interaction
    end
    #Inter site
    for i in 1:N-1
        hamiltonian += t*Cdag(i+1,:ðŸ¦„)*C(i,:ðŸ¦„) + hc() #Standard hopping. Maybe Hopping((i,:â†‘),(i+1,:â†‘)) also or instead
        hamiltonian += t*Cdag(i+1,:ðŸ‘¹)*C(i,:ðŸ‘¹) + hc()
        hamiltonian += Î±*Cdag(i,:ðŸ¦„)*C(i+1,:) + hc() #Spin orbit
        hamiltonian += Î±*Cdag(i,:ðŸ‘¹)*C(i+1,:ðŸ¦„) + hc() 
        hamiltonian += Î”1*Cdag(i,:ðŸ‘¹)*Cdag(i+1,:ðŸ¦„) + hc() #Superconductive pairing
        hamiltonian += Î”1*Cdag(i,:ðŸ¦„)*Cdag(i+1,:ðŸ‘¹) + hc() #Superconductive pairing
        hamiltonian += V*(Cdag(i,:ðŸ‘¹)*C(i,:ðŸ‘¹) + Cdag(i,:ðŸ¦„)*C(i,:ðŸ¦„)) * (Cdag(i+1,:ðŸ‘¹)*C(i+1,:ðŸ‘¹) + Cdag(i+1,:ðŸ¦„)*C(i+1,:ðŸ¦„)) #Coulomb
    end
end